#+TITLE: Rujukan untuk buat laporan

Dokument ini menggandungi pelbagai cara penggunaan R untuk menghasilkan pelbagai
grafik yang dikumpul dari pembacaan di lamanmaya dan percobaan sendiri

* Bar histogram berlainan warna

Buat histogram dan beri warna lain di bar tertentu untuk penekanan terutama untuk
perbandingan dengan data keseluruahan
** Cara terbaik
Ini ialah cara terbaik gabungan dari cara-cara asas di bawah. Untuk pemahaman asas sila rujuk cara asas.
#+BEGIN_SRC R
  set.seed(34521)
  RegData1 <- mtcars[sample(nrow(mtcars), 10),]
  RegData <- dplyr::sample_n(mtcars, 10)

  ##### Give column name
  ##RegData1$navn <- rownames(RegData1) #create colomn "navn"
  RegData <- tibble::rownames_to_column(RegData, "navn") #other way to create rownames ie. better way!

  ggplot(RegData, aes(navn, mpg)) + geom_bar(stat = 'identity') + coord_flip()

  plot1 <- ggplot(RegData, aes(x=reorder(navn, mpg), y=mpg)) #reorder høyst er på toppen

  plot2 <- plot1 + geom_bar(stat = "identity", aes(fill = navn == 'Merc 280')) +
      # y = mpg + 1.3 for adjusting text position
      geom_text(aes(y = mpg + 1.3, label=paste0(mpg, '%'))) +
      scale_fill_manual(values = c('lightblue', 'darkblue'), guide = 'none') +
      scale_x_discrete(expand=c(0,0)) + #ingen border dvs begynner fra null
      scale_y_continuous(limits = c(0,30), expand=c(0,0)) + # samme
      coord_flip()

  plot2
#+END_SRC
** Cara asas
Cara asas yang digunakan untuk mendapatkan cara terbaik di atas.

#+BEGIN_SRC R
  library(dplyr)
  library(ggplot2)

  ##### Bar color cara 1
  mt_mean <-   mtcars %>% group_by(cyl) %>% summarise(avg_mpg = mean(mpg) )

  g <- ggplot( mt_mean , aes(x=factor(cyl), y =avg_mpg)) +
      geom_bar(stat = 'identity', aes(fill = avg_mpg > 25 )  )

  g2 <- g + scale_fill_manual(values = c('red', 'black'), guide="none" )


  #### Bar color cara 2
  area <- c("Tawau", "Sandakan", "Semporna", "Kunak")
  sale <- c(16.5, 13.5, 14, 13)
  df.sale <- data.frame(area, sale)
  colnames(df.sale) <- c("Penduduk", "Jumlah keseluruhan")

  ## opt 1
  area.color <- c(NA, "withcolor", NA, NA)
  plot.sale.bad1 <- ggplot(data=df.sale, aes(x=area, y=sale, fill=area.color)) +
    geom_bar(stat="identity") +
    xlab(colnames(df.sale)[1]) +
    ylab(colnames(df.sale)[2]) +
      ggtitle("Taburan penduduk")
  plot.sale.bad1

  ## opt 2

  plot.sale.bad2 <- ggplot(data=df.sale, aes(x=area, y=sale, fill=area)) +
    geom_bar(stat="identity") +
    scale_fill_manual(values=c("grey50", "red", "grey50", "grey50")) +
    xlab(colnames(df.sale)[1]) +
    ylab(colnames(df.sale)[2]) +
    ggtitle("Taburan penduduk")
  plot.sale.bad2

#+END_SRC
* Selaraskan lebih dari satu plot
Ini ialah cara untuk selaraskan pelbagai plot samada selaraskan ukuran atau axis plot
** Perkongsian x-axis bila y-axis berbeza
Menyelaraskan plot-plot yang berkongsi x-axis tetapi y-axis yang berlainan. Selalunya
penyelarasan tidak berlaku secara automatik kerana perbezaan plot margin. Penggunaan
=tidyr::gather()= kemudian =facet_grid()= dari ggplot2 menghalang penggunaan y-axis
yang berbeza. =facet_grid()= dan =facet_wrap()= diguna untuk pelbagai plot sekiranya
x dan y axis dikongsikan. Walaupun =facet_= boleh meggunakan skala yang berbeza
dengan ~scale="free"~, cara ini tidak tepat untuk menggunakan y-axis yang
berbeza. Oleh itu penyelesaian menggunakkan *grid package* =grid.draw()=,=rbind()=
dan =ggplotGrob()= adalah disarankan.
*** Cara 1
Menggunakan =rbind=. Rujukan di [[https://gist.github.com/tomhopper/faa24797bb44addeba79][Gist]]
#+BEGIN_SRC R
  rm(list=ls())
  library(ggplot2)
  library(grid)
  library(dplyr)
  library(lubridate)

  #' Create some data to play with. Two time series with the same timestamp.
  df <- data.frame(DateTime = lubridate::ymd("2010-07-01") + c(0:8760) * hours(2), series1 = rnorm(8761), series2 = rnorm(8761, 100))

  #' Create the two plots.
  plot1 <- df %>%
    select(DateTime, series1) %>%
    na.omit() %>%
    ggplot() +
    geom_point(aes(x = DateTime, y = series1), size = 0.5, alpha = 0.75) +
    ylab("Red dots / m") +
    theme_minimal() +
    theme(axis.title.x = element_blank())

  plot2 <- df %>%
    select(DateTime, series2) %>%
    na.omit() %>%
    ggplot() +
    geom_point(aes(x = DateTime, y = series2), size = 0.5, alpha = 0.75) +
    ylab("Blue drops / L") +
    theme_minimal() +
    theme(axis.title.x = element_blank())

  grid.newpage()
  grid.draw(rbind(ggplotGrob(plot1), ggplotGrob(plot2), size = "last"))

#+END_SRC
*** Cara 2
Menggunakan =grid::unit.pmax=

#+BEGIN_SRC R
  ##create data
  data <- data.frame(x = seq(0, 100, 1))
  data = transform(data,
                    y1 = sin(x * pi / 10),
                    y2 = x**2
                   )

  ##load libraries
  library(ggplot2)
  library(gridExtra)

  ##generate plots, can combine with facetting but not align
  p11 <- ggplot(data, aes(x = x)) + geom_line(aes(y = y1))
  p22 <- ggplot(data, aes(x = x)) + geom_bar(aes(y = y2), stat = "identity")

  grid.arrange(p11, p22)#combined but not align

  ## to align, covert first to gtable
  p1 <- ggplot_gtable(ggplot_build(p11))
  p2 <- ggplot_gtable(ggplot_build(p22))
  ##or using ggplotGrob to get the gtable
  p111 <- ggplot2::ggplotGrob(p11)
  p222 <- ggplot2::ggplotGrob(p22)

  grid.arrange(p111,p222) #not align

  ##find widths of each plot and calculate maximum and apply to each to get uniform layout to each
  maxWidth = grid::unit.pmax(p1$widths[2:3], p2$widths[2:3])

  p1$widths[2:3] <- maxWidth
  p2$widths[2:3] <- maxWidth

  ##draw final product
  gridExtra::grid.arrange(p1, p2, heights = c(3, 2))
  ##alternativ
  grid::grid.draw(rbind(p111, p222))
#+END_SRC
** Perkongsian y-axis bila x-axis berbeza
Ini ialah contoh untuk menggabungkan pelbagai plot bila x-axis berbeza tetapi berkongsi y-axis. [[http://stackoverflow.com/questions/14743060/r-ggplot-graphs-sharing-the-same-y-axis-but-with-different-x-axis-scales][Stackoverflow]]

#+BEGIN_SRC R
  rm(list=ls())
  library(PtProcess)
  library(ggplot2)
  library(gtable)
  library(grid)
  library(gridExtra)

  ## Data
  set.seed(1)
  lambda <- 1.5
  a <- 1
  pareto <- rpareto(1000,lambda=lambda,a=a)
  x_pareto <- seq(from=min(pareto),to=max(pareto),length=1000)
  y_pareto <- 1-ppareto(x_pareto,lambda,a)
  df1 <- data.frame(x=x_pareto,cdf=y_pareto)

  set.seed(1)
  mean <- 3
  norm <- rnorm(1000,mean=mean)
  x_norm <- seq(from=min(norm),to=max(norm),length=1000)
  y_norm <- pnorm(x_norm,mean=mean)
  df2 <- data.frame(x=x_norm,cdf=y_norm)

  ## Plot ###
  ## Dua plot

  p1 <- ggplot(df1,aes(x=x,y=cdf)) + geom_line() + scale_x_log10() +
        theme(plot.margin = unit(c(0,-.5,0,.5), "lines"),
              plot.background = element_blank()) +
        ggtitle("pareto")

  p2 <- ggplot(df2,aes(x=x,y=cdf)) + geom_line() +
        theme(axis.text.y = element_blank(),
              axis.ticks.y = element_blank(),
              axis.title.y = element_blank(),
              plot.margin = unit(c(0,1,0,-1), "lines"),
              plot.background = element_blank()) +
        ggtitle("norm")

  gt1 <- ggplotGrob(p1)
  gt2 <- ggplotGrob(p2)

  newWidth = unit.pmax(gt1$widths[2:3], gt2$widths[2:3])

  gt1$widths[2:3] = as.list(newWidth)
  gt2$widths[2:3] = as.list(newWidth)

  grid.arrange(gt1, gt2, ncol=2)

  ## lebih dari dua plot guna gTable

  ## New gtable with space for the three plots plus a right-hand margin
  gt = gtable(widths = unit(c(1, 1, 1, .3), "null"), height = unit(1, "null"))
  gtable_show_layout(gt) #utk tengok layout

  ## Instert gt1, gt2 and gt2 into the new gtable
  gt <- gtable_add_grob(gt, gt1, 1, 1)
  gt <- gtable_add_grob(gt, gt2, 1, 2)
  gt <- gtable_add_grob(gt, gt2, 1, 3)

  grid.newpage()
  grid.draw(gt)
#+END_SRC
